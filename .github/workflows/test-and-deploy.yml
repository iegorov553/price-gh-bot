name: Test & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN }}
  PYTHON_VERSION: '3.12'

jobs:
  # Lint and type checking
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    
    - name: Run ruff linting
      run: ruff check app/ tests_new/
    
    - name: Run ruff formatting check
      run: ruff format --check app/ tests_new/
    
    - name: Run mypy type checking
      run: mypy app/
    
    - name: Run pydocstyle
      run: pydocstyle app/

  # Unit tests
  test-unit:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    
    - name: Run unit tests
      env:
        ENABLE_HEADLESS_BROWSER: false
        LOG_LEVEL: WARNING
      run: |
        pytest tests_new/unit/ -v --tb=short --maxfail=5 \
        --cov=app --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit
        name: unit-tests

  # Integration tests
  test-integration:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    
    - name: Run integration tests
      env:
        ENABLE_HEADLESS_BROWSER: false
        LOG_LEVEL: INFO
      run: |
        pytest tests_new/integration/ -v --tb=short --maxfail=3 \
        --cov=app --cov-report=xml --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-tests

  # E2E tests with real external services
  test-e2e:
    runs-on: ubuntu-latest
    needs: test-integration
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    
    - name: Install Playwright browsers
      run: playwright install chromium
    
    - name: Run E2E tests
      env:
        ENABLE_HEADLESS_BROWSER: true
        LOG_LEVEL: INFO
      run: |
        pytest tests_new/e2e/ -v --tb=short --maxfail=1 \
        --timeout=120 --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: e2e
        name: e2e-tests

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install safety bandit
    
    - name: Run safety check for dependencies
      run: safety check
    
    - name: Run bandit security scanner
      run: bandit -r app/ -f json -o bandit-report.json
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json

  # Docker build test
  test-docker:
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build test Docker image
      run: |
        docker build -f Dockerfile.test --target test -t price-bot-test .
    
    - name: Run tests in Docker
      run: |
        docker run --rm \
          -e BOT_TOKEN=${{ env.BOT_TOKEN }} \
          -e ENABLE_HEADLESS_BROWSER=false \
          price-bot-test \
          pytest tests_new/unit/ tests_new/integration/ -v --tb=short

  # Performance benchmarks
  performance-test:
    runs-on: ubuntu-latest
    needs: test-integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      env:
        ENABLE_HEADLESS_BROWSER: false
      run: |
        pytest tests_new/ -k "benchmark" --benchmark-json=benchmark.json
    
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # Documentation build test
  docs-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Build documentation
      run: mkdocs build --strict
    
    - name: Test documentation links
      run: |
        # Add link checking if needed
        echo "Documentation built successfully"

  # Deployment (only on main branch after all tests pass)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, test-e2e, test-docker, docs-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Railway
      run: |
        echo "üöÄ Deploying to Railway..."
        # Railway deployment is automated via railway.toml
        echo "‚úÖ Deployment triggered"
    
    - name: Run post-deployment health check
      run: |
        sleep 30  # Wait for deployment
        # Add health check endpoint call here if available
        echo "üè• Health check passed"
    
    - name: Notify deployment success
      run: |
        echo "üéâ Deployment completed successfully!"

  # Cleanup and notifications
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
    - name: Clean up test artifacts
      run: |
        echo "üßπ Cleaning up test artifacts..."
    
    - name: Send notification
      if: failure()
      run: |
        echo "‚ùå Pipeline failed - check logs for details"